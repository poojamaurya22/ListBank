{"version":3,"sources":["components/Display.js","containers/Home.js","actions.js","constants.js","components/Error.js","components/SideBar.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["Display","bankdetails","searchChange","cityChange","categoryChange","cityValue","categoryValue","resultSize","currentPage","pageSize","changePage","changePageSize","lastIndex","firstIndex","lastPage","className","value","length","onChange","type","placeholder","style","colSpan","map","item","key","ifsc","bank_name","branch","bank_id","address","onClick","Home","this","props","onrequestBankInfo","searchValue","loading","results","onSearchChange","onCityChange","onCategoryChange","onChangePage","onChangePageSize","filteredResult","filter","result","filter2","city","toLowerCase","includes","finalResult","slice","Component","connect","state","searchBank","search","requestBankInfo","isPending","error","data","changeCity","changeCategory","category","changeCurrentPage","dispatch","fetch","then","res","json","payload","catch","event","target","Error","SideBar","href","App","path","component","exact","Boolean","window","location","hostname","match","initialStateBankInfo","initialStateSearch","initialStateCity","initialStateCategory","initialStateCurrentPage","initialStatePageSize","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df9dbf24.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\nfunction Display({bankdetails, searchChange, cityChange, categoryChange, cityValue, categoryValue, resultSize, currentPage, pageSize, changePage, changePageSize }){\n    const lastIndex = currentPage * pageSize;\n    const firstIndex = lastIndex - pageSize + 1;\n    const lastPage = (resultSize%pageSize===0)?(resultSize/pageSize):(resultSize/pageSize)+1;\n\n    return (\n        <div className=\"content-wrap\">\n            <div className=\"d-flex justify-content-between main\">\n                <div className=\"w-50\"><h4>Banks</h4></div>\n                {/* dropdown - city */}\n                <div className=\"dropdown-city\">\n                    <select value={cityValue.length===0?\"Select City\":cityValue} onChange={cityChange}>\n                        <option value=\"Mumbai\">Mumbai</option>\n                        <option value=\"Pune\">Pune</option>\n                        <option value=\"Delhi\">Delhi</option>\n                        <option value=\"Bangalore\">Bangalore</option>\n                        <option value=\"Hyderabad\">Hyderabad</option>\n                    </select>\n                </div> \n                {/* dropdown - category */}\n                <div className=\"dropdown-cat\">\n                    <select value={categoryValue.length===0?\"Select Category\":categoryValue} onChange={categoryChange}>\n                        <option value=\"BankName\">Bank Name</option>\n                        <option value=\"Branch\">Branch</option>\n                        <option value=\"IFSC\">IFSC</option>\n                    </select>\n                </div>\n                {/* search */}\n                <div className=\"input-search\">\n                    <input type='text' placeholder='&#128269;' onChange={searchChange}/>\n                </div>\n            </div>\n            <div className=\"details\" style={{'overflowX':'auto'}}>\n                {/* table listing details */}\n                <table className=\"table table-sm table-hover\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                        <th colSpan=\"1\"></th>\n                        <th colSpan=\"2\">Bank</th>\n                        <th colSpan=\"2\">IFSC</th>\n                        <th colSpan=\"2\">Branch</th>\n                        <th colSpan=\"1\">Bank ID</th>\n                        <th colSpan=\"4\">Address</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { bankdetails.map((item) => <tr key={item.ifsc}>\n                                <th colSpan=\"1\">&#9734;</th>\n                                <td colSpan=\"2\">{item.bank_name}</td>\n                                <td colSpan=\"2\">{item.ifsc}</td>\n                                <td colSpan=\"2\">{item.branch}</td>\n                                <td colSpan=\"1\">{item.bank_id}</td>\n                                <td colSpan=\"4\">{item.address}</td>\n                            </tr>) }\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"d-flex justify-content-between w-50 pagination\">\n                {/* pagination */}\n                <div className=\"row\">Rows Per Pages:\n                    <div className=\"ML10\">\n                        <select value={pageSize} onChange={changePageSize}>\n                            <option value=\"5\">5</option>\n                            <option value=\"10\">10</option>\n                            <option value=\"15\">15</option>\n                            <option value=\"20\">20</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"row\">{firstIndex}-{lastIndex} of {resultSize}\n                    <div className=\"row ML10\">\n                        <div className=\"left\" onClick={() => (currentPage===1)?changePage(currentPage):changePage(currentPage-1)}>&#10094;</div>\n                        <div className=\"right ML10\" onClick={() => (currentPage===lastPage)?changePage(lastPage):changePage(currentPage+1)}>&#10095;</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Display;\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestBankInfo, searchBank, changeCity, changeCategory, changeCurrentPage, changePageSize } from '../actions';\nimport Display from '../components/Display';\n\nconst mapStateToProps = state => {\n    return {\n        searchValue: state.searchBank.search,\n        loading: state.requestBankInfo.isPending,\n        error: state.requestBankInfo.error,\n        results: state.requestBankInfo.data,\n        cityValue: state.changeCity.city,\n        categoryValue: state.changeCategory.category,\n        currentPage: state.changeCurrentPage.currentPage,\n        pageSize: state.changePageSize.pageSize\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onrequestBankInfo: () => dispatch(requestBankInfo()),\n        onSearchChange: (event) => dispatch(searchBank(event.target.value)),\n        onCityChange: (event) => dispatch(changeCity(event.target.value)),\n        onCategoryChange: (event) => dispatch(changeCategory(event.target.value)),\n        onChangePage: (value) => dispatch(changeCurrentPage(value)),\n        onChangePageSize: (event) => dispatch(changePageSize(event.target.value))\n    }\n}\n\nclass Home extends Component {\n\n    componentDidMount() {\n        this.props.onrequestBankInfo();\n    }\n\n    render() {\n        const { searchValue, loading, results, cityValue, categoryValue, currentPage, pageSize,\n            onSearchChange, onCityChange, onCategoryChange, onChangePage, onChangePageSize } = this.props;\n        \n        const lastIndex = currentPage * pageSize;\n        const firstIndex = lastIndex - pageSize;\n    \n        // filtering data based on dropdown and search change\n        const filteredResult = results.filter(result => {\n            const filter2 = result.city.toLowerCase().includes(cityValue.toLowerCase());\n\n            if(categoryValue === \"BankName\"){\n                const filter1 = result.bank_name.toLowerCase().includes(searchValue.toLowerCase()); \n                return filter1 && filter2;\n            }\n            if(categoryValue === \"Branch\"){\n                const filter1 = result.branch.toLowerCase().includes(searchValue.toLowerCase());\n                return filter1 && filter2;\n            }\n            if(categoryValue === \"IFSC\"){\n                const filter1 = result.ifsc.toLowerCase().includes(searchValue.toLowerCase());\n                return filter1 && filter2;\n            }\n            return filter2;\n        });\n\n        const resultSize = filteredResult.length;\n\n        // current page data \n        const finalResult = filteredResult.slice(firstIndex, lastIndex);\n\n        return (\n            <div className=\"container\">\n                {loading ? <div className=\"text-center MT50\">Loading...</div> : \n                    <Display bankdetails={finalResult} searchChange={onSearchChange} cityChange={onCityChange}\n                    categoryChange={onCategoryChange} cityValue={cityValue} categoryValue={categoryValue} resultSize={resultSize}\n                    currentPage={currentPage} pageSize={pageSize} changePage={onChangePage} changePageSize={onChangePageSize}/>}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import { BANKINFO_REQUEST_PENDING, BANKINFO_REQUEST_SUCCESS, BANKINFO_REQUEST_FAILED, URL,\n    CHANGE_SEARCHFIELD, CHANGE_CITY, CHANGE_CATEGORY, CHANGE_CURRENT_PAGE, CHANGE_RESULTS_PER_PAGE } from './constants';\n\nexport const requestBankInfo = () => (dispatch) => {\n    dispatch({ type: BANKINFO_REQUEST_PENDING });\n    fetch(URL)\n        .then(res => res.json())\n        .then(data => dispatch({ type: BANKINFO_REQUEST_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: BANKINFO_REQUEST_FAILED, payload: error }))\n}\n\nexport const searchBank = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const changeCity = (text) => ({ type: CHANGE_CITY, payload: text })\n\nexport const changeCategory = (text) => ({ type: CHANGE_CATEGORY, payload: text })\n\nexport const changeCurrentPage = (text) => ({ type: CHANGE_CURRENT_PAGE, payload: text })\n\nexport const changePageSize = (text) => ({ type: CHANGE_RESULTS_PER_PAGE, payload: text })","export const BANKINFO_REQUEST_PENDING = 'BANKINFO_REQUEST_PENDING';\nexport const BANKINFO_REQUEST_SUCCESS = 'BANKINFO_REQUEST_SUCCESS';\nexport const BANKINFO_REQUEST_FAILED = 'BANKINFO_REQUEST_FAILED';\nexport const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const CHANGE_CITY = 'CHANGE_CITY';\nexport const CHANGE_CATEGORY = 'CHANGE_CATEGORY';\nexport const CHANGE_CURRENT_PAGE = 'CHANGE_CURRENT_PAGE';\nexport const CHANGE_RESULTS_PER_PAGE = 'CHANGE_RESULTS_PER_PAGE';\n\nexport const URL = 'https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI';","import React from 'react';\nimport '../index.css';\n\nfunction Error() {\n  return (\n    <div className=\"MT50 error text-center\">\n        <p>This page does not exist!</p>\n    </div>\n  );\n}\n\nexport default Error;","import React from 'react';\nimport '../index.css';\n\nfunction SideBar() {\n  return (\n    <div className=\"sidebar\">\n        <a href=\"#\">BANKS</a>\n    </div>\n  );\n}\n\nexport default SideBar;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './containers/Home';\nimport Error from './components/Error';\nimport SideBar from './components/SideBar';\nimport './index.css';\n\nclass App extends Component {\n  render() {\n    return (     \n        <BrowserRouter>\n          <SideBar />\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route component={Error}/>\n          </Switch>\n        </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { BANKINFO_REQUEST_PENDING, BANKINFO_REQUEST_SUCCESS, BANKINFO_REQUEST_FAILED,\n    CHANGE_SEARCHFIELD, CHANGE_CITY, CHANGE_CATEGORY, CHANGE_CURRENT_PAGE, CHANGE_RESULTS_PER_PAGE } from './constants';\n\nconst initialStateBankInfo = {\n    isPending: false,\n    error: '',\n    data: []\n}\nexport const requestBankInfo = (state=initialStateBankInfo, action={}) => {\n    switch(action.type){\n        case BANKINFO_REQUEST_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case BANKINFO_REQUEST_SUCCESS:\n            return Object.assign({}, state, { isPending: false, data: action.payload });\n        case BANKINFO_REQUEST_FAILED:\n            return Object.assign({}, state, { isPending: false, error: action.payload });\n        default: \n            return state;\n    }\n}\n\nconst initialStateSearch = {\n    search: ''\n}\nexport const searchBank = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n      case CHANGE_SEARCHFIELD:\n        return Object.assign({}, state, { search: action.payload });\n      default:\n        return state;\n    }\n}\n\nconst initialStateCity = {\n    city: ''\n}\nexport const changeCity = (state=initialStateCity, action={}) => {\n    switch(action.type){\n      case CHANGE_CITY:\n        return Object.assign({}, state, { city: action.payload });\n      default:\n        return state;\n    }\n}\n\nconst initialStateCategory = {\n    category: 'BankName'\n}\nexport const changeCategory = (state=initialStateCategory, action={}) => {\n    switch(action.type){\n      case CHANGE_CATEGORY:\n        return Object.assign({}, state, { category: action.payload });\n      default:\n        return state;\n    }\n}\n\nconst initialStateCurrentPage = {\n    currentPage: 1\n}\nexport const changeCurrentPage = (state=initialStateCurrentPage, action={}) => {\n    switch(action.type){\n      case CHANGE_CURRENT_PAGE:\n        return Object.assign({}, state, { currentPage: action.payload });\n      default:\n        return state;\n    }\n}\n\nconst initialStatePageSize = {\n    pageSize: 10\n}\nexport const changePageSize = (state=initialStatePageSize, action={}) => {\n    switch(action.type){\n      case CHANGE_RESULTS_PER_PAGE:\n        return Object.assign({}, state, { pageSize: action.payload });\n      default:\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestBankInfo, searchBank, changeCity, changeCategory, changeCurrentPage, changePageSize } from './reducers';\n\nconst rootReducer = combineReducers({ requestBankInfo, searchBank, changeCity, changeCategory, changeCurrentPage, changePageSize });\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>,\n                document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}